
import SWXMLHash


class XMLInfo : NSObject {
    var statusCode : String = ""
    
    
   required override init() {
        super.init()
    }
    
    func parseXML(xml: String)throws ->Bool{
        let xml = SWXMLHash.parse(xml)
        let indexer = try xml.byKey("response")
        let value = try indexer.byKey("statusCode")
        statusCode = (value.element?.text)!
        if check(statusCode) {
            return false
        }
        try parseXML(indexer:indexer)
        return true
    }
    
    func parseXML(indexer: XMLIndexer) throws{
            let mirror = Mirror(reflecting: self)
            for  (_ , attr) in mirror.children.enumerated() {
                if let propertyName = attr.label as String! {
                    let value = try indexer.byKey(propertyName)
                    if let xmlInfos =  attr.value as? ParseXML    {
                        print("--"+propertyName+"パーサー開始---" )
                       try xmlInfos.parseXML(indexer: value)
                        print("--"+propertyName+"パーサー終了---" )
                    }else{
                        let text =  value.element?.text ?? ""
                        var keyValue : Any = text
                        if attr.value is Int {
                            if let intValue = Int(text) {
                                keyValue = intValue
                            }else{
                                throw IndexingError.key(key: propertyName)
                            }
                        }
                        self.setValue(keyValue, forKey: propertyName)
                        print(propertyName + " :  " +  text)
                    }
                }
            }
    }
    
    func check(_ statusCode: String?) -> Bool {
        if statusCode == "000" {
            return false
        }
        return true
    }
}

protocol ParseXML {
    func parseXML(indexer: XMLIndexer) throws;
}

class XMLInfos<T : XMLInfo> : NSObject, ParseXML {
    var  xmlInfos : [T] = [T]()
    func parseXML(indexer: XMLIndexer) throws{
        let childrens = indexer.children
        for children in childrens {
            print("childrenパーサー開始" )
            let xmlInfo = T()
            try xmlInfo.parseXML(indexer: children)
            xmlInfos.append(xmlInfo)
        }
    }
}




class PointBalanceInquiryResponseInfo :XMLInfo {
    
    /// 自治体サービス件数(String)
    var pointServiceCount : Int = 0
        /// 自治体ポイントサービス一覧(String)
    var  pointServiceList : XMLInfos<PointInfo> = XMLInfos<PointInfo>()

    var supportEventCount : Int = 0
    
    var supportEventList : XMLInfos<PointInfo> = XMLInfos<PointInfo>()
    
    class PointInfo :XMLInfo {
        var pointServiceId : Int = 0
        /// ポイントサービス名称(String)
        var pointServiceName : String = ""
        
        /// ポイント残高(String)
        var totalPoint : Int = 0
        /// 地方公共団体コード(String)
        var municipalityId : Int = 0
        /// 自治体名称(String)
        var municipalityName : String = ""
    }
}




